<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zkp on As Da Vinci</title>
    <link>https://asdavinci.ing/categories/zkp/</link>
    <description>Recent content in zkp on As Da Vinci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Dec 2022 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://asdavinci.ing/categories/zkp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SHPLONK</title>
      <link>https://asdavinci.ing/post/shplonk/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0800</pubDate>
      <guid>https://asdavinci.ing/post/shplonk/</guid>
      <description>在Plonk协议中，多项式承诺是非常重要的一个环节，协议中的多项式承诺实现了多个多项式在两个点上的open。但是在实际的应用场景下，有可能会出现需要多个多项式在多个不同点处open的场景，如果能通过改进多项式承诺协议来使得plonk支持多个多项式在不同的子集点处的open。&#xA;若 $ z \in S $，那么 $Z_S(x) = \prod_{z \in S} (X-z)$。&#xA;假设有一个数据集$T = {z_1, z_2, &amp;hellip;, z_t}$，并且它的子集$S_1,S_2,&amp;hellip;,S_k \subset T$。如果有k个多项式$f_1(x), f_2(x),&amp;hellip;,f_k(x)$，它们的承诺分别为$cm_1, cm_2,&amp;hellip;,cm_k$，要分别在$S_1,S_2,&amp;hellip;,S_k $上open。&#xA;首先若要使用KZG10对一个多项式做验证的话，那么&#xA;prover计算多项式 $$ h(x) = \frac{f_i(x) - r_i(x)}{Z_{S_i}(x)} $$&#xA;其中$r_i(x)$ 是一个$|s_i|$ 阶的多项式，且满足再$f_i(x) = r_i(x), x \in S_i$。&#xA;再使用srs参数计算证明$W =[h(x)]_1 = g^{h(x)}$，发送给verifier。&#xA;Verifier 拿到证明W后进行验证，这里需要两次pairing运算。&#xA;$$ e(cm_i - [r_i(x)]_1, g_2) = e(W,g_2 ^ {k}) $$&#xA;其中 $k = Z_{S_i}(x)$&#xA;如果要一次性得对这k个多项式进行验证，只需要引入一个随机数&#xA;verifier 生成一个随机数$\gamma$，并发送给prover&#xA;prover 拿着随机数将k组多项式的证明计算 $$ h_i(x) = \frac{f_i(x) - r_i(x)}{Z_{S_i}(x)} $$</description>
    </item>
  </channel>
</rss>
